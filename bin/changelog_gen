#!/usr/bin/env php
<?php

class ChangelogGenerator {

    /**
     * @var string
     */
    protected $output;
    /**
     * @var string
     */
    protected $lastDate;
    /**
     * @var string
     */
    protected $lastValue;

    /**
     * @var bool
     */
    private $cliResult = false;

    const HASH_ARRAY_ID = 0;
    const DATE_ARRAY_ID = 1;
    const COMMENT_ARRAY_ID = 2;
    const USER_ARRAY_ID = 3;
    const GIT_LOG_FORMAT = '%h;%ad;%s;%an <%ae>';

    /**
     * Generator constructor.
     */
    public function __construct()
    {
        $this->setup();

        $this->output = "# Changelog \r\n";
        exec('git log --tags --simplify-by-decoration --pretty="format:%ci %d"', $result);
        $tagList = $this->parseTagList($result);

        $this->lastValue = null;
        foreach ($tagList as $key => $value) {
            $out = array();
            if($this->lastValue !== null && $value['name'] !== 'develop' && $value['name'] !== '->' && $this->lastValue !== '->' && $this->lastValue !== 'develop'){
                $headline = "## [" . $this->lastValue . "] - " . $this->lastDate ." \r\n";
                $statement = 'git log '.$value['name'].'..'. ($this->lastValue ? $this->lastValue : 'HEAD') .' --no-merges --remove-empty --ignore-missing --no-expand-tabs --encoding=UTF-8  --pretty=format:"'.self::GIT_LOG_FORMAT.'" --date=short';
                exec($statement, $out);
                $this->output .= $headline;
                $this->output = $this->render($out, $this->output);
            }else { }
            $this->lastValue = $value['name'];
            $this->lastDate = $value['date'];
        }

        $this->addFirstCommit($value);
        $this->cliResult = file_put_contents('CHANGELOG.md', $this->output);
    }

    /**
     * Setup CLI script
     */
    private function setup(){
        //umask(0000);
        set_time_limit(0);
    }

    /**
     * @param $result
     * @return array
     */
    private function parseTagList($result) {
        $filteredList = array_filter($result, function($value) { return $value !== ''; } );
        $tagList = array();
        foreach ($filteredList as $tagKey => $tag){
            $tagData = explode(" ", $tag);
            if( isset($tagData[5]) || isset($tagData[8]) ){
                $date = $tagData[0];
                //$time = $tagData[1];
                //$timeZone = $tagData[2];
                unset($tagData[3]);
                unset($tagData[4]);
                if( isset($tagData[8]) ){
                    $tagPart = $tagData[8];
                } else {
                    $tagPart = $tagData[5];
                }
                $tagName = str_replace(array('(', ')', ','), array('','', ''), $tagPart);

                if($tagName !== 'develop' && $tagName !== null){

                    $tagList[] = array('date' => $date, 'name' => $tagName);
                }
            }
        }

        return $tagList;
    }

    /**
     *
     * @param array $out
     * @param string $output
     * @return string
     */
    private function render($out, $output) {
        if(is_array($out)){
            foreach($out as $key => $line){
                $result[] = explode(";", $line);
            }
        }else {
            $result[] = explode(";", $out);
        }
        foreach($result as $resKey => $data){
            $output .= "* " .$data[self::COMMENT_ARRAY_ID] . "\r\n";
        }
        return $output;
    }

    /**
     * @param $value
     */
    private function addFirstCommit($value){
        // get initial commit
        $statement = 'git log '.$value['name'].' --no-merges --remove-empty --ignore-missing --no-expand-tabs --encoding=UTF-8  --pretty=format:"'.self::GIT_LOG_FORMAT.'" --date=short';
        exec($statement, $out);
        $this->output .= "## [" . $value['name'] . "] - ".$value['date']." \r\n";
        $this->output = $this->render($out, $this->output);
    }

    /**
     * @param int $size
     * @param int $precision
     *
     * @return string
     */
    private function formatBytes($size, $precision = 2)
    {
        $base = log($size, 1024);
        $suffixes = array('Bytes', 'KB', 'MB', 'GB', 'TB');
        return round(pow(1024, $base - floor($base)), $precision) .' '. $suffixes[floor($base)];
    }

    /**
     * @return string
     */
    public function __toString(){

        if($this->cliResult !== false){
            return (string)"File generated: " . 'CHANGELOG.md | '  . $this->formatBytes($this->cliResult - 4000);
        }else {
            return "ERROR: File cant be created"; 
        }

    }
}

echo new ChangelogGenerator();
